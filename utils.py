from aiogram import Bot
from config import TOKEN, CHAT_ID, YEARLY_MESSAGE, YANDEX_TRACK_URL, get_yearly_photo
from db import get_random_video, get_video_count, get_yearly_events
import datetime

async def send_daily_message():
    bot = Bot(token=TOKEN)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ
        video_data = get_random_video()
        
        if video_data:
            file_id, file_unique_id, username, caption = video_data
            message_text = f"üé• –î–∞–≤–∞–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏–º, –∫–∞–∫ –±—ã–ª–æ –∫—Ä—É—Ç–æ?\n\nüìπ –û—Ç: {username}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await bot.send_video(
                chat_id=CHAT_ID,
                video=file_id,
                caption=message_text
            )
            print(f"Random video sent: {file_id}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(chat_id=CHAT_ID, text="–û—Ö—É–µ–Ω–Ω—ã–π –±–ª—è—Ç—å —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –±—Ä–∞—Ç–∏–∫–∏!")
            print("No videos available, sent regular message")
            
    except Exception as e:
        print(f"Error sending daily message: {e}")
    finally:
        await bot.session.close()

async def send_yearly_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    bot = Bot(token=TOKEN)
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç—Ä–µ–∫
        message_text = f"{YEARLY_MESSAGE}\n\nüéµ –ú—É–∑—ã–∫–∞: {YANDEX_TRACK_URL}"
        
        print(f"Sending yearly message to chat_id: {CHAT_ID}")
        print(f"Message text: {message_text}")
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –∫–∞—Ä—Ç–∏–Ω–∫–∏
        photo_file_id = get_yearly_photo()
        
        if photo_file_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            await bot.send_photo(
                chat_id=CHAT_ID, 
                photo=photo_file_id,
                caption=message_text
            )
            print(f"Yearly message with photo sent successfully: {photo_file_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            await bot.send_message(chat_id=CHAT_ID, text=message_text)
            print("Yearly message without photo sent successfully")
        
    except Exception as e:
        print(f"Error sending yearly message: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await bot.session.close()

async def send_yearly_event_message(event_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    bot = Bot(token=TOKEN)
    try:
        event_id, name, day, month, hour, minute, message_text, music_url, photo_file_id, is_active, created_at = event_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        full_message = f"üéâ **{name}**\n\n{message_text}"
        
        if music_url:
            full_message += f"\n\nüéµ –ú—É–∑—ã–∫–∞: {music_url}"
        
        print(f"Sending yearly event message: {name} to chat_id: {CHAT_ID}")
        print(f"Message text: {full_message}")
        
        if photo_file_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            await bot.send_photo(
                chat_id=CHAT_ID, 
                photo=photo_file_id,
                caption=full_message
            )
            print(f"Yearly event message with photo sent successfully: {photo_file_id}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            await bot.send_message(chat_id=CHAT_ID, text=full_message)
            print("Yearly event message without photo sent successfully")
        
    except Exception as e:
        print(f"Error sending yearly event message: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await bot.session.close()

async def check_and_send_yearly_events():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–≥–æ–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    print("üöÄ check_and_send_yearly_events function started!")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        now = datetime.datetime.now()
        current_day = now.day
        current_month = now.month
        current_hour = now.hour
        current_minute = now.minute
        
        print(f"üîç Checking yearly events for {current_day}.{current_month} at {current_hour}:{current_minute:02d}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –µ–∂–µ–≥–æ–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        print("üìä Getting yearly events from database...")
        events = get_yearly_events()
        print(f"üìÖ Found {len(events)} active yearly events")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
        for event in events:
            event_id, name, day, month, hour, minute, message_text, music_url, photo_file_id, is_active, created_at = event
            
            print(f"üéØ Checking event: {name} scheduled for {day}.{month} {hour}:{minute:02d}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            if (day == current_day and 
                month == current_month and 
                hour == current_hour and 
                minute == current_minute):
                
                print(f"‚úÖ Found matching event: {name} at {day}.{month} {hour}:{minute:02d}")
                await send_yearly_event_message(event)
            else:
                print(f"‚è∞ Event {name} doesn't match current time: {day}.{month} {hour}:{minute:02d} vs {current_day}.{current_month} {current_hour}:{current_minute:02d}")
        
        print("‚úÖ check_and_send_yearly_events function completed successfully!")
        
    except Exception as e:
        print(f"‚ùå Error checking yearly events: {e}")
        import traceback
        traceback.print_exc()
