#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥–∞—Ä–º–æ—à–µ—á–Ω—ã—Ö –ø–æ–¥–ª–æ–∂–µ–∫
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ffmpeg –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ª—É–ø–æ–≤
"""

import subprocess
import os
from pathlib import Path

def create_garmon_backing():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –≥–∞—Ä–º–æ—à–µ—á–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É"""
    assets_dir = Path("assets/backing")
    assets_dir.mkdir(parents=True, exist_ok=True)
    
    output_file = assets_dir / "garmon_test.mp3"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–∞—Ä–º–æ—à–µ—á–Ω—É—é –º–µ–ª–æ–¥–∏—é —Å –ø–æ–º–æ—â—å—é ffmpeg
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–µ –≤–æ–ª–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≥–∞—Ä–º–æ—à–∫–∏
    cmd = [
        'ffmpeg', '-y',
        '-f', 'lavfi',
        '-i', 'sine=frequency=220:duration=15',  # –õ—è (A3)
        '-f', 'lavfi', 
        '-i', 'sine=frequency=277:duration=15',  # –î–æ# (C#4)
        '-f', 'lavfi',
        '-i', 'sine=frequency=330:duration=15',  # –ú–∏ (E4)
        '-filter_complex',
        '[0][1][2]amix=inputs=3:duration=15:weights=0.3 0.4 0.3[out]',
        '-map', '[out]',
        '-c:a', 'libmp3lame',
        '-b:a', '128k',
        '-ar', '44100',
        str(output_file)
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥–∞—Ä–º–æ—à–µ—á–Ω–∞—è –ø–æ–¥–ª–æ–∂–∫–∞: {output_file}")
            return str(output_file)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ª–æ–∂–∫–∏: {result.stderr}")
            return None
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ª–æ–∂–∫–∏")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_balalaika_backing():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –±–∞–ª–∞–ª–∞–µ—á–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É"""
    assets_dir = Path("assets/backing")
    output_file = assets_dir / "balalaika_test.mp3"
    
    # –ë–∞–ª–∞–ª–∞–µ—á–Ω–∞—è –º–µ–ª–æ–¥–∏—è - –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    cmd = [
        'ffmpeg', '-y',
        '-f', 'lavfi',
        '-i', 'sine=frequency=440:duration=12',  # –õ—è (A4)
        '-f', 'lavfi',
        '-i', 'sine=frequency=554:duration=12',  # –î–æ# (C#5)
        '-f', 'lavfi',
        '-i', 'sine=frequency=659:duration=12',  # –ú–∏ (E5)
        '-filter_complex',
        '[0][1][2]amix=inputs=3:duration=12:weights=0.4 0.3 0.3[out]',
        '-map', '[out]',
        '-c:a', 'libmp3lame',
        '-b:a', '128k',
        '-ar', '44100',
        str(output_file)
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–ª–∞–ª–∞–µ—á–Ω–∞—è –ø–æ–¥–ª–æ–∂–∫–∞: {output_file}")
            return str(output_file)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ª–æ–∂–∫–∏: {result.stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def create_beat_backing():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –±–∏—Ç–æ–≤—É—é –ø–æ–¥–ª–æ–∂–∫—É"""
    assets_dir = Path("assets/backing")
    output_file = assets_dir / "beat_test.mp3"
    
    # –ü—Ä–æ—Å—Ç–æ–π –±–∏—Ç - –±–∞—Å + —Ö–∞–π-—Ö—ç—Ç
    cmd = [
        'ffmpeg', '-y',
        '-f', 'lavfi',
        '-i', 'sine=frequency=60:duration=10',   # –ù–∏–∑–∫–∏–π –±–∞—Å
        '-f', 'lavfi',
        '-i', 'sine=frequency=8000:duration=10', # –•–∞–π-—Ö—ç—Ç
        '-filter_complex',
        '[0][1]amix=inputs=2:duration=10:weights=0.7 0.3[out]',
        '-map', '[out]',
        '-c:a', 'libmp3lame',
        '-b:a', '128k',
        '-ar', '44100',
        str(output_file)
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∏—Ç–æ–≤–∞—è –ø–æ–¥–ª–æ–∂–∫–∞: {output_file}")
            return str(output_file)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ª–æ–∂–∫–∏: {result.stderr}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ª–æ–∂–∫–∏"""
    print("üéµ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ª–æ–∂–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
    try:
        subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ª–æ–∂–µ–∫.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ª–æ–∂–∫–∏
    garmon = create_garmon_backing()
    balalaika = create_balalaika_backing()
    beat = create_beat_backing()
    
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    if garmon:
        print(f"  - {garmon}")
    if balalaika:
        print(f"  - {balalaika}")
    if beat:
        print(f"  - {beat}")
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—É—à–∫–∏.")

if __name__ == "__main__":
    main()
