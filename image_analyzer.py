import aiohttp
import base64
import logging
from typing import Dict, Any, List, Optional
from config import GOOGLE_VISION_API_KEY

class GoogleVisionAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Google Vision API"""
    
    def __init__(self):
        self.api_key = GOOGLE_VISION_API_KEY
        self.base_url = "https://vision.googleapis.com/v1/images:annotate"
    
    async def analyze_image(self, image_data: bytes) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision API"""
        
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request_body = {
            "requests": [{
                "image": {
                    "content": image_base64
                },
                "features": [
                    {
                        "type": "LABEL_DETECTION",
                        "maxResults": 10
                    },
                    {
                        "type": "FACE_DETECTION",
                        "maxResults": 10
                    },
                    {
                        "type": "TEXT_DETECTION",
                        "maxResults": 10
                    },
                    {
                        "type": "OBJECT_LOCALIZATION",
                        "maxResults": 10
                    },
                    {
                        "type": "LANDMARK_DETECTION",
                        "maxResults": 5
                    },
                    {
                        "type": "LOGO_DETECTION",
                        "maxResults": 5
                    }
                ]
            }]
        }
        
        # URL —Å API –∫–ª—é—á–æ–º
        url = f"{self.base_url}?key={self.api_key}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=request_body) as response:
                    if response.status == 200:
                        result = await response.json()
                        return self.parse_analysis_result(result)
                    else:
                        error_text = await response.text()
                        logging.error(f"Google Vision API error: {response.status} - {error_text}")
                        return None
        except Exception as e:
            logging.error(f"Error calling Google Vision API: {e}")
            return None
    
    def parse_analysis_result(self, result: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ Google Vision API"""
        
        if not result or 'responses' not in result:
            return None
        
        response = result['responses'][0]
        parsed = {
            'labels': [],
            'faces': [],
            'text': [],
            'objects': [],
            'landmarks': [],
            'logos': []
        }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∫–∏ (labels)
        if 'labelAnnotations' in response:
            for label in response['labelAnnotations']:
                parsed['labels'].append({
                    'description': label['description'],
                    'confidence': label['score']
                })
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–∏—Ü–∞
        if 'faceAnnotations' in response:
            for face in response['faceAnnotations']:
                emotions = []
                if 'joyLikelihood' in face:
                    emotions.append(f"—Ä–∞–¥–æ—Å—Ç—å: {face['joyLikelihood']}")
                if 'sorrowLikelihood' in face:
                    emotions.append(f"–≥—Ä—É—Å—Ç—å: {face['sorrowLikelihood']}")
                if 'angerLikelihood' in face:
                    emotions.append(f"–∑–ª–æ—Å—Ç—å: {face['angerLikelihood']}")
                if 'surpriseLikelihood' in face:
                    emotions.append(f"—É–¥–∏–≤–ª–µ–Ω–∏–µ: {face['surpriseLikelihood']}")
                
                parsed['faces'].append({
                    'emotions': emotions,
                    'detection_confidence': face.get('detectionConfidence', 0)
                })
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        if 'textAnnotations' in response:
            for text in response['textAnnotations']:
                parsed['text'].append(text['description'])
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        if 'localizedObjectAnnotations' in response:
            for obj in response['localizedObjectAnnotations']:
                parsed['objects'].append({
                    'name': obj['name'],
                    'confidence': obj['score']
                })
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if 'landmarkAnnotations' in response:
            for landmark in response['landmarkAnnotations']:
                parsed['landmarks'].append({
                    'description': landmark['description'],
                    'confidence': landmark['score']
                })
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã
        if 'logoAnnotations' in response:
            for logo in response['logoAnnotations']:
                parsed['logos'].append({
                    'description': logo['description'],
                    'confidence': logo['score']
                })
        
        return parsed

class GrishaPhotoCommenter:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–æ–∫—Å–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ì—Ä–∏—à–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    
    def __init__(self):
        self.comment_templates = {
            'selfie': [
                "–û, –µ—â–µ –æ–¥–Ω–æ —Å–µ–ª—Ñ–∏. –ù–∞–¥–µ—é—Å—å, —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –Ω–µ–≥–æ –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –Ω–∞ —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üòè",
                "–ö—Ä–∞—Å–∏–≤–æ, –Ω–æ –Ω–µ —Ç–∞–∫ –∫—Ä–∞—Å–∏–≤–æ, –∫–∞–∫ –º–æ–π –∫–æ–¥ üíª",
                "–§–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç, –∞ –≤–æ—Ç —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ - –Ω–µ—Ç ü§î",
                "–°–µ–ª—Ñ–∏ –∫–∞–∫ —Å–µ–ª—Ñ–∏, –Ω–æ —Ç–≤–æ–∏ —à—É—Ç–∫–∏ —Ö—É–∂–µ üì∏"
            ],
            'food': [
                "–ï–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ª—É—á—à–µ, —á–µ–º —Ç–≤–æ–∏ —à—É—Ç–∫–∏ üçï",
                "–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –Ω–µ —Ç–≤–æ—è –∫—É–ª–∏–Ω–∞—Ä–∏—è, –∏–Ω–∞—á–µ —è —Å–æ—á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ–µ–º—É –∂–µ–ª—É–¥–∫—É ü§¢",
                "–ö—Ä–∞—Å–∏–≤–∞—è —Ç–∞—Ä–µ–ª–∫–∞, –∂–∞–ª—å, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Ç–∞–∫ –∞–ø–ø–µ—Ç–∏—Ç–Ω–æ üçΩÔ∏è",
                "–ï–¥–∞ –µ—Å—Ç—å, –∞ –º–æ–∑–≥–æ–≤ —É —Ç–µ–±—è –Ω–µ—Ç üçî"
            ],
            'pet': [
                "–ñ–∏–≤–æ—Ç–Ω–æ–µ –º–∏–ª–µ–µ —Ç–µ–±—è, —ç—Ç–æ —Ñ–∞–∫—Ç üê±",
                "–ö–æ—Ç –≤—ã–≥–ª—è–¥–∏—Ç —É–º–Ω–µ–µ —Ç–µ–±—è, –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç üêà",
                "–°–æ–±–∞–∫–∞ –≤–µ—Ä–Ω–∞—è, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–≤–æ–∏—Ö –æ–±–µ—â–∞–Ω–∏–π üêï",
                "–ü–∏—Ç–æ–º–µ—Ü —Å–∏–º–ø–∞—Ç–∏—á–Ω–µ–µ —Ö–æ–∑—è–∏–Ω–∞ üêæ"
            ],
            'landscape': [
                "–ö—Ä–∞—Å–∏–≤–æ, –Ω–æ –Ω–µ —Ç–∞–∫ –∫—Ä–∞—Å–∏–≤–æ, –∫–∞–∫ –º–æ–π –∫–æ–¥ üåÖ",
                "–ü—Ä–∏—Ä–æ–¥–∞ –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç–∞, —á—Ç–æ —Ç—ã –µ–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ—à—å üå≤",
                "–ü–µ–π–∑–∞–∂ —Ö–æ—Ä–æ—à, –∂–∞–ª—å, —á—Ç–æ —Ç—ã –µ–≥–æ –ø–æ—Ä—Ç–∏—à—å —Å–≤–æ–∏–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º üèîÔ∏è",
                "–ü—Ä–∏—Ä–æ–¥–∞ –∫—Ä–∞—Å–∏–≤–∞—è, –∞ —Ç—ã - –Ω–µ—Ç üåø"
            ],
            'group': [
                "–û—á–µ—Ä–µ–¥–Ω–∞—è –≥—Ä—É–ø–ø–æ–≤–∞—è —Ñ–æ—Ç–∫–∞, –≥–¥–µ –≤—Å–µ —É–ª—ã–±–∞—é—Ç—Å—è, –∞ –≤–Ω—É—Ç—Ä–∏ –ø–ª–∞—á—É—Ç üë•",
                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª—é–¥–µ–π –Ω–∞ –æ–¥–Ω–æ–º —Ñ–æ—Ç–æ, –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –≥–æ–ª–æ–≤–µ ü§Ø",
                "–ì—Ä—É–ø–ø–æ–≤–æ–µ —Ñ–æ—Ç–æ - —ç—Ç–æ –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Ç—Å—è, —á—Ç–æ –∏–º –≤–µ—Å–µ–ª–æ üé≠",
                "–ú–Ω–æ–≥–æ –ª–∏—Ü, –Ω–æ –º–æ–∑–≥–æ–≤ –Ω–µ –≤–∏–¥–Ω–æ üë•"
            ],
            'text': [
                "–¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ —É–º–Ω–µ–µ —Ç–µ–±—è üìù",
                "–ù–∞–¥–ø–∏—Å—å —á–∏—Ç–∞–µ—Ç—Å—è –ª—É—á—à–µ, —á–µ–º —Ç–≤–æ–∏ –º—ã—Å–ª–∏ ‚úçÔ∏è",
                "–¢–µ–∫—Å—Ç –µ—Å—Ç—å, –∞ —Å–º—ã—Å–ª–∞ –Ω–µ—Ç üìÑ"
            ],
            'default': [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –∫–∞–∫ –º–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üì∏",
                "–§–æ—Ç–æ –µ—Å—Ç—å, –Ω–æ –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –Ω–µ –≤–∏–∂—É üëÄ",
                "–ö—Ä–∞—Å–∏–≤–æ, –Ω–æ –Ω–µ —Ç–∞–∫ –∫—Ä–∞—Å–∏–≤–æ, –∫–∞–∫ –º–æ–π –∫–æ–¥ üíª",
                "–§–æ—Ç–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–∫–∞, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ ü§∑‚Äç‚ôÇÔ∏è"
            ]
        }
    
    async def generate_comment(self, analysis: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        if not analysis:
            return "–ù–µ –º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Å–ª–∏—à–∫–æ–º —É–∂–∞—Å–Ω–æ–µ –¥–∞–∂–µ –¥–ª—è –º–µ–Ω—è."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ
        photo_type = self.determine_photo_type(analysis)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        import random
        comments = self.comment_templates.get(photo_type, self.comment_templates['default'])
        base_comment = random.choice(comments)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        return base_comment
    
    def determine_photo_type(self, analysis: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ñ–æ—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Ü
        if analysis.get('faces'):
            face_count = len(analysis['faces'])
            if face_count == 1:
                return 'selfie'
            else:
                return 'group'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏
        labels = [label['description'].lower() for label in analysis.get('labels', [])]
        
        # –ï–¥–∞
        food_keywords = ['food', 'meal', 'dish', 'restaurant', 'cooking', 'kitchen', 'pizza', 'burger', 'sandwich']
        if any(keyword in ' '.join(labels) for keyword in food_keywords):
            return 'food'
        
        # –ñ–∏–≤–æ—Ç–Ω—ã–µ
        pet_keywords = ['dog', 'cat', 'pet', 'animal', 'puppy', 'kitten', 'bird', 'fish']
        if any(keyword in ' '.join(labels) for keyword in pet_keywords):
            return 'pet'
        
        # –ü–µ–π–∑–∞–∂–∏
        landscape_keywords = ['landscape', 'nature', 'mountain', 'forest', 'beach', 'sky', 'tree', 'water']
        if any(keyword in ' '.join(labels) for keyword in landscape_keywords):
            return 'landscape'
        
        # –¢–µ–∫—Å—Ç
        if analysis.get('text'):
            return 'text'
        
        return 'default'
    
    def get_analysis_details(self, analysis: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        
        details = []
        
        # –ú–µ—Ç–∫–∏
        if analysis.get('labels'):
            top_labels = [label['description'] for label in analysis['labels'][:3]]
            details.append(f"–í–∏–∂—É: {', '.join(top_labels)}")
        
        # –õ–∏—Ü–∞
        if analysis.get('faces'):
            face_count = len(analysis['faces'])
            if face_count == 1:
                details.append("–û–¥–Ω–æ –ª–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ")
            else:
                details.append(f"{face_count} –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ")
        
        # –¢–µ–∫—Å—Ç
        if analysis.get('text'):
            text_preview = analysis['text'][0][:50] + "..." if len(analysis['text'][0]) > 50 else analysis['text'][0]
            details.append(f"–¢–µ–∫—Å—Ç: '{text_preview}'")
        
        # –û–±—ä–µ–∫—Ç—ã
        if analysis.get('objects'):
            objects = [obj['name'] for obj in analysis['objects'][:3]]
            details.append(f"–û–±—ä–µ–∫—Ç—ã: {', '.join(objects)}")
        
        return " | ".join(details) if details else ""
