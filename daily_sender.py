import asyncio
import logging
from datetime import datetime, time
from aiogram import Bot
from aiogram.types import Chat
from db import get_random_video, get_video_count
from config import TARGET_CHAT_ID, SOURCE_CHAT_ID, DAILY_VIDEO_HOUR, DAILY_VIDEO_MINUTE

class DailyVideoSender:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.target_chat_id = TARGET_CHAT_ID  # 2512455884
        self.source_chat_id = SOURCE_CHAT_ID  # 887092139
        
    async def send_daily_video(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç —Å –ø–æ–¥–ø–∏—Å—å—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ
            video_count = get_video_count()
            if video_count == 0:
                logging.info("No videos in database, skipping daily send")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ
            video_data = get_random_video()
            if not video_data:
                logging.warning("Failed to get random video from database")
                return
                
            file_id, file_unique_id, username, caption = video_data
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            message_text = "–î–∞–≤–∞–π—Ç–µ –≤—Å–ø–æ–º–Ω–∏–º, –∫–∞–∫ –±—ã–ª–æ –∫—Ä—É—Ç–æ?"
            if username:
                message_text += f"\n\nüìπ –û—Ç: {username}"
            if caption and caption != "–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ-–∫—Ä—É–∂–æ—á–µ–∫":
                message_text += f"\nüí¨ {caption}"
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            await self.bot.send_video(
                chat_id=self.target_chat_id,
                video=file_id,
                caption=message_text
            )
            
            logging.info(f"Daily video sent to chat {self.target_chat_id}: {file_id}")
            
        except Exception as e:
            logging.error(f"Error sending daily video: {e}")
            
    async def start_daily_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ"""
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                now = datetime.now()
                current_time = now.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                target_time = time(DAILY_VIDEO_HOUR, DAILY_VIDEO_MINUTE)
                
                if current_time.hour == target_time.hour and current_time.minute == target_time.minute:
                    await self.send_daily_video()
                    
                    # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                    await asyncio.sleep(60)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    await asyncio.sleep(60)
                    
            except Exception as e:
                logging.error(f"Error in daily scheduler: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
