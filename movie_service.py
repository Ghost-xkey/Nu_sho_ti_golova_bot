import requests
import random
import logging
from typing import List, Dict, Optional
from config import KINOPOISK_API_TOKEN

class MovieService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞"""
    
    def __init__(self):
        self.api_token = KINOPOISK_API_TOKEN
        self.base_url = "https://api.kinopoisk.dev"
        self.headers = {
            "X-API-KEY": self.api_token,
            "Content-Type": "application/json"
        }
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã
        self.genres = {
            "–∫–æ–º–µ–¥–∏—è": "–∫–æ–º–µ–¥–∏—è",
            "–¥—Ä–∞–º–∞": "–¥—Ä–∞–º–∞", 
            "—Ç—Ä–∏–ª–ª–µ—Ä": "—Ç—Ä–∏–ª–ª–µ—Ä",
            "–±–æ–µ–≤–∏–∫": "–±–æ–µ–≤–∏–∫",
            "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
            "—É–∂–∞—Å—ã": "—É–∂–∞—Å—ã",
            "–¥–µ—Ç–µ–∫—Ç–∏–≤": "–¥–µ—Ç–µ–∫—Ç–∏–≤",
            "–º–µ–ª–æ–¥—Ä–∞–º–∞": "–º–µ–ª–æ–¥—Ä–∞–º–∞",
            "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è": "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
            "—Ñ—ç–Ω—Ç–µ–∑–∏": "—Ñ—ç–Ω—Ç–µ–∑–∏",
            "–∫—Ä–∏–º–∏–Ω–∞–ª": "–∫—Ä–∏–º–∏–Ω–∞–ª",
            "–±–∏–æ–≥—Ä–∞—Ñ–∏—è": "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
            "–º—É–ª—å—Ç—Ñ–∏–ª—å–º": "–º—É–ª—å—Ç—Ñ–∏–ª—å–º",
            "—Å–µ–º–µ–π–Ω—ã–π": "—Å–µ–º–µ–π–Ω—ã–π"
        }
        
        # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∂–∞–Ω—Ä—ã
        self.mood_genres = {
            "–≥—Ä—É—Å—Ç–Ω–æ": ["–¥—Ä–∞–º–∞", "–º–µ–ª–æ–¥—Ä–∞–º–∞", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è"],
            "–≤–µ—Å–µ–ª–æ": ["–∫–æ–º–µ–¥–∏—è", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º"],
            "—Ö–æ—á–µ—Ç—Å—è –ø–æ–¥—É–º–∞—Ç—å": ["–¥—Ä–∞–º–∞", "–∫—Ä–∏–º–∏–Ω–∞–ª", "–¥–µ—Ç–µ–∫—Ç–∏–≤"],
            "—Ö–æ—á–µ—Ç—Å—è –ø–æ—Å–ø–∞—Ç—å": ["–¥—Ä–∞–º–∞", "–º–µ–ª–æ–¥—Ä–∞–º–∞", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è"],
            "—Ö–æ—á–µ—Ç—Å—è –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω–∞": ["–±–æ–µ–≤–∏–∫", "—Ç—Ä–∏–ª–ª–µ—Ä", "—É–∂–∞—Å—ã"],
            "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ": ["–º–µ–ª–æ–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è", "—Å–µ–º–µ–π–Ω—ã–π"],
            "—Å –¥–µ—Ç—å–º–∏": ["—Å–µ–º–µ–π–Ω—ã–π", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"]
        }

    def search_movies(self, genre: str = None, year: int = None, rating_min: float = None, 
                     limit: int = 10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        try:
            url = f"{self.base_url}/v1.4/movie"
            params = {
                "limit": limit,
                "page": 1
            }
            
            if genre:
                params["genres.name"] = genre
            if year:
                params["year"] = year
            if rating_min:
                params["rating.kp"] = f"{rating_min}-10"
                
            response = requests.get(url, headers=self.headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                return data.get("docs", [])
            else:
                logging.error(f"Kinopoisk API error: {response.status_code} - {response.text}")
                return []
                
        except Exception as e:
            logging.error(f"Error searching movies: {e}")
            return []

    def get_random_movie(self, genre: str = None) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"""
        try:
            url = f"{self.base_url}/v1.4/movie/random"
            params = {}
            
            if genre:
                params["genres.name"] = genre
                
            response = requests.get(url, headers=self.headers, params=params, timeout=30)
            
            if response.status_code == 200:
                return response.json()
            else:
                logging.error(f"Kinopoisk API error: {response.status_code}")
                return None
                
        except Exception as e:
            logging.error(f"Error getting random movie: {e}")
            return None

    def search_by_name(self, name: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            url = f"{self.base_url}/v1.4/movie/search"
            params = {
                "query": name,
                "limit": 5,
                "page": 1
            }
            
            response = requests.get(url, headers=self.headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                return data.get("docs", [])
            else:
                logging.error(f"Kinopoisk API error: {response.status_code}")
                return []
                
        except Exception as e:
            logging.error(f"Error searching movie by name: {e}")
            return []

    def get_recommendations_by_mood(self, mood: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∞–Ω—Ä—ã –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
            mood_genres = self.mood_genres.get(mood, ["–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è"])
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä –∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
            genre = random.choice(mood_genres)
            
            # –ò—â–µ–º —Ñ–∏–ª—å–º—ã —Å —Ö–æ—Ä–æ—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            movies = self.search_movies(genre=genre, rating_min=7.0, limit=5)
            
            # –ï—Å–ª–∏ –º–∞–ª–æ —Ñ–∏–ª—å–º–æ–≤, –±–µ—Ä–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            if len(movies) < 3:
                movies = self.search_movies(genre=genre, limit=5)
                
            return movies
            
        except Exception as e:
            logging.error(f"Error getting mood recommendations: {e}")
            return []

    def format_movie_info(self, movie: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ"""
        try:
            name = movie.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            name_en = movie.get("alternativeName", "")
            year = movie.get("year", "")
            rating_data = movie.get("rating", {})
            rating = rating_data.get("kp", 0) if rating_data else 0
            description = movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            poster_data = movie.get("poster", {})
            poster_url = poster_data.get("url", "") if poster_data else ""
            
            # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if description and len(description) > 200:
                description = description[:200] + "..."
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
            info = f"üé¨ **{name}**"
            if name_en:
                info += f" ({name_en})"
            if year:
                info += f" ({year})"
            if rating:
                info += f" ‚≠ê {rating}"
                
            info += f"\nüìù {description}"
            
            if poster_url:
                info += f"\nüñºÔ∏è {poster_url}"
                
            return info
            
        except Exception as e:
            logging.error(f"Error formatting movie info: {e}")
            return f"üé¨ {movie.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å–º')}"

    def get_genre_recommendations(self, genre: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∂–∞–Ω—Ä—É"""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∂–∞–Ω—Ä
            normalized_genre = self.genres.get(genre.lower(), genre)
            
            # –ò—â–µ–º —Ñ–∏–ª—å–º—ã —Å —Ö–æ—Ä–æ—à–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            movies = self.search_movies(genre=normalized_genre, rating_min=7.0, limit=5)
            
            # –ï—Å–ª–∏ –º–∞–ª–æ —Ñ–∏–ª—å–º–æ–≤, –±–µ—Ä–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            if len(movies) < 3:
                movies = self.search_movies(genre=normalized_genre, limit=5)
                
            return movies
            
        except Exception as e:
            logging.error(f"Error getting genre recommendations: {e}")
            return []

    def get_popular_movies(self, year: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã"""
        try:
            movies = self.search_movies(year=year, rating_min=7.5, limit=5)
            return movies
            
        except Exception as e:
            logging.error(f"Error getting popular movies: {e}")
            return []
