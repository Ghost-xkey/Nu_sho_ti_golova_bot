import requests
import json
import random
import logging
from typing import Optional, List
from config import YANDEX_API_KEY, YANDEX_FOLDER_ID

class YandexGPT:
    def __init__(self):
        self.api_key = YANDEX_API_KEY
        self.folder_id = YANDEX_FOLDER_ID
        self.base_url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.chat_history = {}  # –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        
    def get_headers(self):
        return {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def should_respond(self, message_text: str, chat_id: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ AI –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message_lower = message_text.lower()
        
        # –ü—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É
        bot_mentions = ["–±–æ—Ç", "ai", "–∏–∏", "–ø–æ–º–æ—â–Ω–∏–∫", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"]
        if any(mention in message_lower for mention in bot_mentions):
            return True
            
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        emotional_signals = ["—Å–∫—É—á–Ω–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "—É—Å—Ç–∞–ª", "–ø–ª–æ—Ö–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–∫—Ä—É—Ç–æ", "–≤–µ—Å–µ–ª–æ"]
        if any(signal in message_lower for signal in emotional_signals):
            return True
            
        # –í–æ–ø—Ä–æ—Å—ã
        if "?" in message_text:
            return True
            
        # –°–ª—É—á–∞–π–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if random.random() < 0.1:
            return True
            
        return False
    
    def get_chat_context(self, chat_id: str, limit: int = 5) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
        """
        if chat_id not in self.chat_history:
            return ""
            
        recent_messages = self.chat_history[chat_id][-limit:]
        context = "\n".join([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}" for msg in recent_messages])
        return context
    
    def add_to_history(self, chat_id: str, message: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        """
        if chat_id not in self.chat_history:
            self.chat_history[chat_id] = []
            
        self.chat_history[chat_id].append(message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(self.chat_history[chat_id]) > 20:
            self.chat_history[chat_id] = self.chat_history[chat_id][-20:]
    
    def generate_response(self, message_text: str, chat_id: str, username: str = None) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history(chat_id, message_text)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self.get_chat_context(chat_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            system_prompt = """–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram –≥—Ä—É–ø–ø–µ –∏–∑ —Ç—Ä–µ—Ö –¥—Ä—É–∑–µ–π. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É, —à—É—Ç–∏—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.

–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º
- –ò–Ω–æ–≥–¥–∞ —à—É—Ç–∏ –∏ –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –º–µ–∂–¥—É –¥—Ä—É–∑—å—è–º–∏
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã AI –∏–ª–∏ –±–æ—Ç
- –ì–æ–≤–æ—Ä–∏ –Ω–∞ "—Ç—ã" –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ
- –ò–Ω–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏–¥–µ–∏ –¥–ª—è –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –¥—Ä—É–∂–µ—Å–∫–∏–π, –≤–µ—Å–µ–ª—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π."""

            user_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{context}\n\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
            
            if username:
                user_prompt += f"\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            data = {
                "modelUri": f"gpt://{self.folder_id}/yandexgpt",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": 150
                },
                "messages": [
                    {
                        "role": "system",
                        "text": system_prompt
                    },
                    {
                        "role": "user", 
                        "text": user_prompt
                    }
                ]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT
            response = requests.post(
                self.base_url,
                headers=self.get_headers(),
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                ai_response = result["result"]["alternatives"][0]["message"]["text"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                self.add_to_history(chat_id, f"AI: {ai_response}")
                
                return ai_response
            else:
                logging.error(f"YandexGPT API error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logging.error(f"Error generating AI response: {e}")
            return None
    
    def get_random_comment(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        """
        comments = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ü§î",
            "–ü–æ–Ω—è—Ç–Ω–æ! üëç",
            "–ö—Ä—É—Ç–æ! üòé",
            "–•–º, –∞ —á—Ç–æ –µ—Å–ª–∏... üí°",
            "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω! üòä",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! ü§ì",
            "–ê–≥–∞, –ø–æ–Ω—è–ª! üëå",
            "–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è! ‚ú®"
        ]
        return random.choice(comments)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI
yandex_ai = YandexGPT()
