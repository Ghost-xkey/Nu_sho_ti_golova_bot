from aiogram import Router, types
from aiogram.filters import BaseFilter, CommandStart, Command
from text import WELCOME_MESSAGE, HELP_MESSAGE
from kb import main_keyboard
from db import save_video_message, get_video_count, get_user_stats, get_total_users
import logging

class TextEqualsFilter(BaseFilter):
    def __init__(self, text: str, ignore_case: bool = True):
        self.text = text
        self.ignore_case = ignore_case

    async def __call__(self, message: types.Message) -> bool:
        if message.text is None:
            return False
        if self.ignore_case:
            return message.text.lower() == self.text.lower()
        return message.text == self.text

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    try:
        logging.info(f"Start command received from user {message.from_user.id}")
        from kb import get_main_menu_keyboard
        from db import save_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = message.from_user
        save_user(user.id, user.username or user.first_name)
        
        text = "üéâ **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨!** üéâ\n\n"
        text += "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
        logging.info("Start command response sent")
    except Exception as e:
        logging.error(f"Error in start command: {e}")

@router.message(Command(commands=["menu"]))
async def cmd_menu(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        from kb import get_main_menu_keyboard
        from db import save_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = message.from_user
        save_user(user.id, user.username or user.first_name)
        
        text = "üéâ **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üéâ\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(), parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"Error in menu command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é")

@router.message(Command(commands=["help"]))
async def cmd_help(message: types.Message):
    try:
        await message.answer(HELP_MESSAGE)
    except Exception as e:
        print(f"Error in help command: {e}")

@router.message(Command(commands=["videos"]))
async def cmd_videos(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        video_count = get_video_count()
        if video_count > 0:
            await message.answer(f"üé• –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {video_count} –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                               f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º!")
        else:
            await message.answer("üé• –ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n\n"
                               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª!")
    except Exception as e:
        logging.error(f"Error in videos command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command(commands=["random"]))
async def cmd_random_video(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    try:
        from db import get_random_video
        
        video_data = get_random_video()
        
        if video_data:
            file_id, file_unique_id, username, caption = video_data
            message_text = f"üé• –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\nüìπ –û—Ç: {username}"
            
            await message.answer_video(
                video=file_id,
                caption=message_text
            )
            logging.info(f"Random video sent manually by user {message.from_user.id}")
        else:
            await message.answer("üé• –ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n\n"
                               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª!")
    except Exception as e:
        logging.error(f"Error in random video command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∏–¥–µ–æ")

@router.message(Command(commands=["stats"]))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        video_count = get_video_count()
        total_users = get_total_users()
        user_stats = get_user_stats()
        
        if video_count > 0:
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
            stats_text += f"üé• –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {video_count}\n"
            stats_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n\n"
            stats_text += f"üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            
            for i, (username, count) in enumerate(user_stats[:5], 1):
                stats_text += f"{i}. {username}: {count} –≤–∏–¥–µ–æ\n"
                
            await message.answer(stats_text)
        else:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.\n\n"
                               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
    except Exception as e:
        logging.error(f"Error in stats command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command(commands=["time"]))
async def cmd_time(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        from config import MEMORY_HOUR, MEMORY_MINUTE
        
        time_str = f"{MEMORY_HOUR:02d}:{MEMORY_MINUTE:02d}"
        await message.answer(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {time_str}\n\n"
                           f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
    except Exception as e:
        logging.error(f"Error in time command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

@router.message(Command(commands=["add_video"]))
async def cmd_add_video(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤—Ä—É—á–Ω—É—é –ø–æ file_id (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤)
        admin_ids = [203593418]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–æ–≤
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        command_text = message.text.split()
        if len(command_text) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_video <file_id>\n\n"
                               f"–ü—Ä–∏–º–µ—Ä: /add_video DQACAgIAAyEFAASVwQjMAAINKmi3iN_95n1LCbr-QabEUt3-qRvNAAKYdwACYNnASeJU1kTZBTitNgQ")
            return
        
        file_id = command_text[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        success = save_video_message(
            file_id=file_id,
            file_unique_id=f"manual_{file_id[:10]}",  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            message_id=message.message_id,
            user_id=message.from_user.id,
            username=message.from_user.username or message.from_user.first_name,
            caption="–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é"
        )
        
        if success:
            video_count = get_video_count()
            await message.answer(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é!\n\n"
                               f"–í—Å–µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {video_count}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")
            
    except Exception as e:
        logging.error(f"Error in add_video command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")

@router.message(Command(commands=["test_yearly"]))
async def cmd_test_yearly(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        logging.info(f"Test yearly command received from user {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–æ–≤
        
        logging.info(f"User ID: {message.from_user.id}, Admin IDs: {admin_ids}")
        
        if message.from_user.id not in admin_ids:
            logging.warning(f"User {message.from_user.id} is not admin")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        logging.info("User is admin, proceeding with test")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        from utils import send_yearly_message
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info("Sending yearly message...")
        await send_yearly_message()
        logging.info("Yearly message sent successfully")
            
    except Exception as e:
        logging.error(f"Error in test_yearly command: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(Command(commands=["my_id"]))
async def cmd_my_id(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ—Ç username"
        first_name = message.from_user.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        
        await message.answer(f"üÜî –í–∞—à ID: {user_id}\n"
                           f"üë§ Username: @{username}\n"
                           f"üìù –ò–º—è: {first_name}")
        
        logging.info(f"User ID check: {user_id}, username: {username}, name: {first_name}")
        
    except Exception as e:
        logging.error(f"Error in my_id command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID")

@router.message(Command(commands=["test_chat"]))
async def cmd_test_chat(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        from config import CHAT_ID
        from aiogram import Bot
        from config import TOKEN
        
        bot = Bot(token=TOKEN)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await bot.send_message(
                chat_id=CHAT_ID, 
                text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞!\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ."
            )
            await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {CHAT_ID}")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            
        finally:
            await bot.session.close()
            
    except Exception as e:
        logging.error(f"Error in test_chat command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞")

@router.message(Command(commands=["get_chat_id"]))
async def cmd_get_chat_id(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    try:
        chat_id = message.chat.id
        chat_type = message.chat.type
        chat_title = message.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        
        await message.answer(f"üÜî ID —á–∞—Ç–∞: {chat_id}\n"
                           f"üìù –¢–∏–ø: {chat_type}\n"
                           f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
        
        logging.info(f"Chat ID: {chat_id}, Type: {chat_type}, Title: {chat_title}")
        
    except Exception as e:
        logging.error(f"Error in get_chat_id command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —á–∞—Ç–∞")

@router.message(Command(commands=["set_yearly_image"]))
async def cmd_set_yearly_image(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not message.photo:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /set_yearly_image")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        from config import update_yearly_photo
        update_yearly_photo(file_id)
        
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                           f"File ID: {file_id}\n"
                           f"–¢–µ–ø–µ—Ä—å –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.")
        
        logging.info(f"Yearly image updated by user {message.from_user.id}: {file_id}")
        
    except Exception as e:
        logging.error(f"Error in set_yearly_image command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏")

@router.message(Command(commands=["remove_yearly_image"]))
async def cmd_remove_yearly_image(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        from config import remove_yearly_photo
        remove_yearly_photo()
        
        await message.answer("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞!\n\n"
                           "–¢–µ–ø–µ—Ä—å –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
        
        logging.info(f"Yearly image removed by user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in remove_yearly_image command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏")

@router.message(Command(commands=["add_yearly_event"]))
async def cmd_add_yearly_event(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ caption –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ)
        command_text_raw = message.text or message.caption or ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
        if not command_text_raw:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Ç–µ–∫—Å—Ç–æ–º:\n\n"
                               "/add_yearly_event <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–µ–Ω—å> <–º–µ—Å—è—Ü> [—á–∞—Å] [–º–∏–Ω—É—Ç–∞]\n\n"
                               "–ü—Ä–∏–º–µ—Ä: /add_yearly_event –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è 15 3 12 0\n\n"
                               "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–∫–æ–º–∞–Ω–¥–æ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_text = command_text_raw.split()
        if len(command_text) < 4:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_yearly_event <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–µ–Ω—å> <–º–µ—Å—è—Ü> [—á–∞—Å] [–º–∏–Ω—É—Ç–∞]\n\n"
                               "–ü—Ä–∏–º–µ—Ä: /add_yearly_event –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è 15 3 12 0\n"
                               "–ü—Ä–∏–º–µ—Ä: /add_yearly_event –ù–æ–≤—ã–π_–≥–æ–¥ 1 1\n\n"
                               "üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–∫–æ–º–∞–Ω–¥–æ–π")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∫–æ–Ω—Ü–∞
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ —á–∏—Å–ª–∞
            minute = int(command_text[-1]) if len(command_text) > 5 else 0
            hour = int(command_text[-2]) if len(command_text) > 4 else 10
            month = int(command_text[-3])
            day = int(command_text[-4])
            
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            name_parts = command_text[1:-4] if len(command_text) > 5 else command_text[1:-2]
            name = ' '.join(name_parts).replace('_', ' ')
            
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}\n\n"
                               "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–Ω—å, –º–µ—Å—è—Ü, —á–∞—Å –∏ –º–∏–Ω—É—Ç–∞ - —ç—Ç–æ —á–∏—Å–ª–∞\n\n"
                               "–ü—Ä–∏–º–µ—Ä: /add_yearly_event –° –¥–Ω–µ–º —É–ª—ã–±–æ–∫ 3 9 6 43")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        photo_file_id = None
        if message.photo:
            photo_file_id = message.photo[-1].file_id
            logging.info(f"Photo detected for yearly event: {photo_file_id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        from db import add_yearly_event, get_yearly_events
        
        logging.info(f"Adding yearly event: name={name}, day={day}, month={month}, hour={hour}, minute={minute}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_events = get_yearly_events()
        logging.info(f"Existing events count: {len(existing_events)}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        try:
            logging.info("Calling add_yearly_event function...")
            logging.info(f"Parameters: name={name}, day={day}, month={month}, hour={hour}, minute={minute}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            from db import add_yearly_event
            logging.info(f"add_yearly_event function: {add_yearly_event}")
            
            success = add_yearly_event(name, day, month, hour, minute, f"{name}!", None, photo_file_id)
            logging.info(f"Function call completed, result: {success}")
        except Exception as e:
            logging.error(f"Exception in add_yearly_event: {e}")
            import traceback
            traceback.print_exc()
            success = False
        
        logging.info(f"Add yearly event result: {success}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
        events_after = get_yearly_events()
        logging.info(f"Events after adding: {len(events_after)}")
        
        if success:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–∞
            month_emojis = {
                1: "‚ùÑÔ∏è", 2: "üíù", 3: "üå∏", 4: "üå±", 5: "üå∫", 6: "‚òÄÔ∏è",
                7: "üèñÔ∏è", 8: "üåª", 9: "üçÇ", 10: "üéÉ", 11: "üçÅ", 12: "üéÑ"
            }
            month_emoji = month_emojis.get(month, "üìÖ")
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
            success_text = "üéâ **–°–û–ë–´–¢–ò–ï –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–û!** üéâ\n"
            success_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            success_text += f"‚îå‚îÄ üéØ **–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            success_text += f"‚îÇ üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: **{name}**\n"
            success_text += f"‚îÇ {month_emoji} –î–∞—Ç–∞: **{day:02d}.{month:02d}** –≤ **{hour:02d}:{minute:02d}**\n"
            success_text += f"‚îÇ üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {name}!\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
            if photo_file_id:
                success_text += f"‚îÇ üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞: ‚úÖ\n"
            else:
                success_text += f"‚îÇ üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞: ‚ùå\n"
            
            success_text += f"‚îÇ üéµ –ú—É–∑—ã–∫–∞: ‚ùå\n"
            success_text += f"‚îÇ üü¢ –°—Ç–∞—Ç—É—Å: **–ê–∫—Ç–∏–≤–Ω–æ**\n"
            success_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            success_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            success_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list_yearly_events` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"
            
            await message.answer(success_text, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            
    except Exception as e:
        logging.error(f"Error in add_yearly_event command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

@router.message(Command(commands=["list_yearly_events"]))
async def cmd_list_yearly_events(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–∂–µ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    try:
        from db import get_yearly_events
        
        events = get_yearly_events()
        
        if not events:
            await message.answer("üìÖ –ï–∂–µ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        events_text = "üéâ **–ï–ñ–ï–ì–û–î–ù–´–ï –°–û–ë–´–¢–ò–Ø** üéâ\n"
        events_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        for i, event in enumerate(events, 1):
            event_id, name, day, month, hour, minute, message_text, music_url, photo_file_id, is_active, created_at = event
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–∞
            month_emojis = {
                1: "‚ùÑÔ∏è", 2: "üíù", 3: "üå∏", 4: "üå±", 5: "üå∫", 6: "‚òÄÔ∏è",
                7: "üèñÔ∏è", 8: "üåª", 9: "üçÇ", 10: "üéÉ", 11: "üçÅ", 12: "üéÑ"
            }
            month_emoji = month_emojis.get(month, "üìÖ")
            
            # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è
            events_text += f"‚îå‚îÄ üéØ **–°–û–ë–´–¢–ò–ï #{i}** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            events_text += f"‚îÇ üÜî ID: `{event_id}`\n"
            events_text += f"‚îÇ üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: **{name}**\n"
            events_text += f"‚îÇ {month_emoji} –î–∞—Ç–∞: **{day:02d}.{month:02d}** –≤ **{hour:02d}:{minute:02d}**\n"
            events_text += f"‚îÇ üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
            if music_url:
                events_text += f"‚îÇ üéµ –ú—É–∑—ã–∫–∞: [–°—Å—ã–ª–∫–∞]({music_url})\n"
            else:
                events_text += f"‚îÇ üéµ –ú—É–∑—ã–∫–∞: ‚ùå\n"
                
            if photo_file_id:
                events_text += f"‚îÇ üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞: ‚úÖ\n"
            else:
                events_text += f"‚îÇ üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞: ‚ùå\n"
            
            # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            status_emoji = "üü¢" if is_active else "üî¥"
            status_text = "–ê–∫—Ç–∏–≤–Ω–æ" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
            events_text += f"‚îÇ {status_emoji} –°—Ç–∞—Ç—É—Å: **{status_text}**\n"
            
            events_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        events_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        events_text += f"üìä **–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:** {len(events)}\n"
        events_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/delete_yearly_event <ID>` –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        
        await message.answer(events_text, parse_mode="Markdown")
        
    except Exception as e:
        logging.error(f"Error in list_yearly_events command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")

@router.message(Command(commands=["delete_yearly_event"]))
async def cmd_delete_yearly_event(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è
        command_text = message.text.split()
        if len(command_text) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_yearly_event <ID_—Å–æ–±—ã—Ç–∏—è>\n\n"
                               "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_yearly_events —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å ID")
            return
        
        event_id = int(command_text[1])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        from db import delete_yearly_event
        success = delete_yearly_event(event_id)
        
        if success:
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            delete_text = "üóëÔ∏è **–°–û–ë–´–¢–ò–ï –£–î–ê–õ–ï–ù–û!** üóëÔ∏è\n"
            delete_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            delete_text += f"‚îå‚îÄ üéØ **–£–î–ê–õ–ï–ù–ù–û–ï –°–û–ë–´–¢–ò–ï** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            delete_text += f"‚îÇ üÜî ID: **{event_id}**\n"
            delete_text += f"‚îÇ üî¥ –°—Ç–∞—Ç—É—Å: **–£–¥–∞–ª–µ–Ω–æ**\n"
            delete_text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            delete_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            delete_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list_yearly_events` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π"
            
            await message.answer(delete_text, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            
    except Exception as e:
        logging.error(f"Error in delete_yearly_event command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

@router.message(Command(commands=["init_db"]))
async def cmd_init_db(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from db import create_tables
        create_tables()
        
        await message.answer("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        logging.info(f"Database tables initialized by user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in init_db command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")

@router.message(Command(commands=["debug_db"]))
async def cmd_debug_db(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        import os
        from config import DB_PATH
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        debug_info = f"üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
        debug_info += f"üìÅ –ü—É—Ç—å –∫ –ë–î: `{DB_PATH}`\n"
        debug_info += f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: `{os.getcwd()}`\n"
        debug_info += f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
        
        try:
            files = os.listdir('.')
            for file in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                debug_info += f"  - {file}\n"
            if len(files) > 10:
                debug_info += f"  ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤\n"
        except Exception as e:
            debug_info += f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}\n"
        
        debug_info += f"\nüìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –ë–î:\n"
        if os.path.exists(DB_PATH):
            debug_info += f"  ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            debug_info += f"  üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(DB_PATH)} –±–∞–π—Ç\n"
            debug_info += f"  üîê –ü—Ä–∞–≤–∞: {oct(os.stat(DB_PATH).st_mode)[-3:]}\n"
        else:
            debug_info += f"  ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        debug_info += f"\nüîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        try:
            import sqlite3
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            debug_info += f"  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n"
            debug_info += f"  üìã –¢–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}\n"
            conn.close()
        except Exception as e:
            debug_info += f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}\n"
        
        await message.answer(debug_info)
        
    except Exception as e:
        logging.error(f"Error in debug_db command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

@router.message(Command(commands=["reset_db"]))
async def cmd_reset_db(message: types.Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        import os
        from config import DB_PATH
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if DB_PATH != ':memory:' and os.path.exists(DB_PATH):
            import shutil
            if os.path.isdir(DB_PATH):
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —É–¥–∞–ª—è–µ–º –µ—ë
                shutil.rmtree(DB_PATH)
                await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞: {DB_PATH}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                os.remove(DB_PATH)
                await message.answer(f"‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω: {DB_PATH}")
        else:
            await message.answer("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from db import create_tables
        create_tables()
        
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
        
        logging.info(f"Database reset by user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in reset_db command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.message(TextEqualsFilter(text="–ü—Ä–∏–≤–µ—Ç"))
async def greet(message: types.Message):
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    except Exception as e:
        print(f"Error in greet handler: {e}")

@router.message(lambda message: message.video is not None)
async def handle_video(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logging.info(f"Video message received from user {message.from_user.id}")
        video = message.video
        user = message.from_user
        
        logging.info(f"Video details: file_id={video.file_id}, file_unique_id={video.file_unique_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = save_video_message(
            file_id=video.file_id,
            file_unique_id=video.file_unique_id,
            message_id=message.message_id,
            user_id=user.id,
            username=user.username or user.first_name,
            caption=message.caption
        )
        
        if success:
            logging.info(f"Video saved successfully from user {user.id}: {video.file_id}")
        else:
            logging.error(f"Failed to save video from user {user.id}: {video.file_id}")
            
    except Exception as e:
        logging.error(f"Error handling video: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

@router.message(lambda message: message.video_note is not None)
async def handle_video_note(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è-–∫—Ä—É–∂–æ—á–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logging.info(f"Video note received from user {message.from_user.id}")
        video_note = message.video_note
        user = message.from_user
        
        logging.info(f"Video note details: file_id={video_note.file_id}, file_unique_id={video_note.file_unique_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = save_video_message(
            file_id=video_note.file_id,
            file_unique_id=video_note.file_unique_id,
            message_id=message.message_id,
            user_id=user.id,
            username=user.username or user.first_name,
            caption="–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ-–∫—Ä—É–∂–æ—á–µ–∫"
        )
        
        if success:
            logging.info(f"Video note saved successfully from user {user.id}: {video_note.file_id}")
        else:
            logging.error(f"Failed to save video note from user {user.id}: {video_note.file_id}")
            
    except Exception as e:
        logging.error(f"Error handling video note: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è")

# ==================== CALLBACK HANDLERS ====================

@router.callback_query(lambda c: c.data == "main_menu")
async def callback_main_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    try:
        from kb import get_main_menu_keyboard
        from db import save_user
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user = callback_query.from_user
        save_user(user.id, user.username or user.first_name)
        
        text = "üéâ **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ!** üéâ\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in main_menu callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é")

@router.callback_query(lambda c: c.data == "list_events")
async def callback_list_events(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π'"""
    try:
        from db import get_yearly_events
        from kb import get_events_list_keyboard, get_back_to_menu_keyboard
        
        events = get_yearly_events()
        
        if not events:
            text = "üìÖ **–ï–ñ–ï–ì–û–î–ù–´–ï –°–û–ë–´–¢–ò–Ø** üìÖ\n\n"
            text += "–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."
            
            await callback_query.message.edit_text(
                text=text,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
        else:
            text = f"üìÖ **–ï–ñ–ï–ì–û–î–ù–´–ï –°–û–ë–´–¢–ò–Ø** üìÖ\n\n"
            text += f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: **{len(events)}**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
            
            await callback_query.message.edit_text(
                text=text,
                reply_markup=get_events_list_keyboard(events),
                parse_mode="Markdown"
            )
        
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in list_events callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")

@router.callback_query(lambda c: c.data.startswith("event_details_"))
async def callback_event_details(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è"""
    try:
        event_id = int(callback_query.data.split("_")[2])
        from db import get_yearly_events
        from kb import get_event_actions_keyboard
        
        events = get_yearly_events()
        event = None
        
        for e in events:
            if e[0] == event_id:
                event = e
                break
        
        if not event:
            await callback_query.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        event_id, name, day, month, hour, minute, message_text, music_url, photo_file_id, is_active, created_at = event
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—è—Ü–∞
        month_emojis = {
            1: "‚ùÑÔ∏è", 2: "üíù", 3: "üå∏", 4: "üå±", 5: "üå∫", 6: "‚òÄÔ∏è",
            7: "üèñÔ∏è", 8: "üåª", 9: "üçÇ", 10: "üéÉ", 11: "üçÅ", 12: "üéÑ"
        }
        month_emoji = month_emojis.get(month, "üìÖ")
        
        # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏—è
        text = "üéØ **–î–ï–¢–ê–õ–ò –°–û–ë–´–¢–ò–Ø** üéØ\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"‚îå‚îÄ üéØ **–°–û–ë–´–¢–ò–ï #{event_id}** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        text += f"‚îÇ üÜî ID: `{event_id}`\n"
        text += f"‚îÇ üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: **{name}**\n"
        text += f"‚îÇ {month_emoji} –î–∞—Ç–∞: **{day:02d}.{month:02d}** –≤ **{hour:02d}:{minute:02d}**\n"
        text += f"‚îÇ üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
        if music_url:
            text += f"‚îÇ üéµ –ú—É–∑—ã–∫–∞: [–°—Å—ã–ª–∫–∞]({music_url})\n"
        else:
            text += f"‚îÇ üéµ –ú—É–∑—ã–∫–∞: ‚ùå\n"
            
        if photo_file_id:
            text += f"‚îÇ üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞: ‚úÖ\n"
        else:
            text += f"‚îÇ üì∑ –ö–∞—Ä—Ç–∏–Ω–∫–∞: ‚ùå\n"
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        status_emoji = "üü¢" if is_active else "üî¥"
        status_text = "–ê–∫—Ç–∏–≤–Ω–æ" if is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        text += f"‚îÇ {status_emoji} –°—Ç–∞—Ç—É—Å: **{status_text}**\n"
        
        text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_event_actions_keyboard(event_id),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in event_details callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–±—ã—Ç–∏—è")

@router.callback_query(lambda c: c.data.startswith("delete_event_"))
async def callback_delete_event(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        event_id = int(callback_query.data.split("_")[2])
        from kb import get_confirm_delete_keyboard
        
        text = "‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø** ‚ö†Ô∏è\n\n"
        text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ **#{event_id}**?\n\n"
        text += "‚ùó **–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_confirm_delete_keyboard(event_id),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in delete_event callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def callback_confirm_delete(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        event_id = int(callback_query.data.split("_")[2])
        from db import delete_yearly_event
        from kb import get_back_to_menu_keyboard
        
        success = delete_yearly_event(event_id)
        
        if success:
            text = "üóëÔ∏è **–°–û–ë–´–¢–ò–ï –£–î–ê–õ–ï–ù–û!** üóëÔ∏è\n"
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            text += f"‚îå‚îÄ üéØ **–£–î–ê–õ–ï–ù–ù–û–ï –°–û–ë–´–¢–ò–ï** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            text += f"‚îÇ üÜî ID: **{event_id}**\n"
            text += f"‚îÇ üî¥ –°—Ç–∞—Ç—É—Å: **–£–¥–∞–ª–µ–Ω–æ**\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            text += "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!"
            
            await callback_query.message.edit_text(
                text=text,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="Markdown"
            )
            await callback_query.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
        
    except Exception as e:
        logging.error(f"Error in confirm_delete callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

@router.callback_query(lambda c: c.data.startswith("cancel_delete_"))
async def callback_cancel_delete(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è"""
    try:
        event_id = int(callback_query.data.split("_")[2])
        from kb import get_event_actions_keyboard
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º —Å–æ–±—ã—Ç–∏—è
        await callback_event_details(callback_query)
        
    except Exception as e:
        logging.error(f"Error in cancel_delete callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è")

@router.callback_query(lambda c: c.data == "statistics")
async def callback_statistics(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    try:
        from kb import get_statistics_keyboard
        
        text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê** üìä\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_statistics_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in statistics callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(lambda c: c.data == "general_stats")
async def callback_general_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        from db import get_video_count, get_total_users, get_yearly_events
        from kb import get_back_to_menu_keyboard
        
        video_count = get_video_count()
        total_users = get_total_users()
        events = get_yearly_events()
        active_events = len([e for e in events if e[9]])  # is_active
        
        text = "üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê** üìä\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"‚îå‚îÄ üìà **–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        text += f"‚îÇ üé• –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π: **{video_count}**\n"
        text += f"‚îÇ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
        text += f"‚îÇ üìÖ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: **{len(events)}**\n"
        text += f"‚îÇ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: **{active_events}**\n"
        text += f"‚îÇ üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: **{len(events) - active_events}**\n"
        text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in general_stats callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.callback_query(lambda c: c.data == "video_stats")
async def callback_video_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        from db import get_video_count, get_user_stats
        from kb import get_back_to_menu_keyboard
        
        video_count = get_video_count()
        user_stats = get_user_stats()
        
        text = "üé• **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ò–î–ï–û** üé•\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"‚îå‚îÄ üìπ **–í–ò–î–ï–û–°–û–û–ë–©–ï–ù–ò–Ø** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        text += f"‚îÇ üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: **{video_count}**\n"
        text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        if user_stats:
            text += "‚îå‚îÄ üë• **–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            for i, (username, count) in enumerate(user_stats[:5], 1):
                text += f"‚îÇ {i}. {username}: **{count}** –≤–∏–¥–µ–æ\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        else:
            text += "‚îå‚îÄ üë• **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            text += f"‚îÇ üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in video_stats callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–¥–µ–æ")

@router.callback_query(lambda c: c.data == "events_stats")
async def callback_events_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    try:
        from db import get_yearly_events
        from kb import get_back_to_menu_keyboard
        
        events = get_yearly_events()
        active_events = [e for e in events if e[9]]  # is_active
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        month_stats = {}
        for event in active_events:
            month = event[3]  # month
            month_names = {
                1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
                5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
                9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
            }
            month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
            month_stats[month_name] = month_stats.get(month_name, 0) + 1
        
        text = "üìÖ **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ë–´–¢–ò–ô** üìÖ\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"‚îå‚îÄ üìä **–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        text += f"‚îÇ üìà –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: **{len(events)}**\n"
        text += f"‚îÇ üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: **{len(active_events)}**\n"
        text += f"‚îÇ üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: **{len(events) - len(active_events)}**\n"
        text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        if month_stats:
            text += "‚îå‚îÄ üìÜ **–°–û–ë–´–¢–ò–Ø –ü–û –ú–ï–°–Ø–¶–ê–ú** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            for month, count in sorted(month_stats.items()):
                text += f"‚îÇ {month}: **{count}** —Å–æ–±—ã—Ç–∏–π\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += "üí° –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è!"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in events_stats callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π")

@router.callback_query(lambda c: c.data == "user_stats")
async def callback_user_stats(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        from db import get_user_stats, get_total_users
        from kb import get_back_to_menu_keyboard
        
        total_users = get_total_users()
        user_stats = get_user_stats()
        
        text = "üë• **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** üë•\n"
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"‚îå‚îÄ üìä **–û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        text += f"‚îÇ üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users}**\n"
        text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        if user_stats:
            text += "‚îå‚îÄ üèÜ **–¢–û–ü –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –ü–û –í–ò–î–ï–û** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            for i, (username, count) in enumerate(user_stats[:10], 1):
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø-3
                if i == 1:
                    emoji = "ü•á"
                elif i == 2:
                    emoji = "ü•à"
                elif i == 3:
                    emoji = "ü•â"
                else:
                    emoji = f"{i}."
                
                text += f"‚îÇ {emoji} {username}: **{count}** –≤–∏–¥–µ–æ\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            total_videos = sum(count for _, count in user_stats)
            avg_videos = total_videos / len(user_stats) if user_stats else 0
            
            text += "‚îå‚îÄ üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            text += f"‚îÇ üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_videos}**\n"
            text += f"‚îÇ üìà –°—Ä–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: **{avg_videos:.1f}**\n"
            text += f"‚îÇ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∏–¥–µ–æ: **{len(user_stats)}**\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        else:
            text += "‚îå‚îÄ üìä **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
            text += f"‚îÇ üìπ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤–∏–¥–µ–æ\n"
            text += f"‚îÇ üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞!\n"
            text += f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
        
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        text += "üí° –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in user_stats callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.callback_query(lambda c: c.data == "add_event")
async def callback_add_event(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'"""
    try:
        from kb import get_back_to_menu_keyboard
        
        text = "‚ûï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø** ‚ûï\n\n"
        text += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        text += "`/add_yearly_event <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–µ–Ω—å> <–º–µ—Å—è—Ü> [—á–∞—Å] [–º–∏–Ω—É—Ç–∞]`\n\n"
        text += "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        text += "‚Ä¢ `/add_yearly_event –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è 15 3 12 0`\n"
        text += "‚Ä¢ `/add_yearly_event –ù–æ–≤—ã–π_–≥–æ–¥ 1 1`\n\n"
        text += "üí° **–°–æ–≤–µ—Ç:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é-–∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—é!"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in add_event callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")

@router.callback_query(lambda c: c.data == "help")
async def callback_help(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    try:
        from kb import get_back_to_menu_keyboard
        
        text = "‚ùì **–ü–û–ú–û–©–¨** ‚ùì\n\n"
        text += "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
        text += "üìÖ **–°–æ–±—ã—Ç–∏—è:**\n"
        text += "‚Ä¢ `/add_yearly_event` - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        text += "‚Ä¢ `/list_yearly_events` - —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π\n"
        text += "‚Ä¢ `/delete_yearly_event <ID>` - —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n\n"
        text += "üé• **–í–∏–¥–µ–æ:**\n"
        text += "‚Ä¢ `/random_video` - —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ\n"
        text += "‚Ä¢ `/video_stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ\n\n"
        text += "‚öôÔ∏è **–ê–¥–º–∏–Ω:**\n"
        text += "‚Ä¢ `/init_db` - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î\n"
        text += "‚Ä¢ `/reset_db` - —Å–±—Ä–æ—Å –ë–î\n\n"
        text += "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in help callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–º–æ—â–∏")

@router.callback_query(lambda c: c.data == "settings")
async def callback_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    try:
        from kb import get_back_to_menu_keyboard
        
        text = "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò** ‚öôÔ∏è\n\n"
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n\n"
        text += "üïê **–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:**\n"
        text += "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: 09:00\n"
        text += "‚Ä¢ –ï–∂–µ–≥–æ–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n\n"
        text += "üéµ **–ú–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
        text += "‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ: ‚úÖ\n"
        text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫: ‚úÖ\n"
        text += "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–∑—ã–∫–∏: ‚úÖ\n\n"
        text += "üåç **–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:**\n"
        text += "‚Ä¢ –¢–µ–∫—É—â–∏–π: –ú–æ—Å–∫–≤–∞ (UTC+3)\n\n"
        text += "üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**\n"
        text += "‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n"
        text += "‚Ä¢ –ü—É—Ç—å: `/tmp/bot_database.db`\n\n"
        text += "üí° **–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        text += "‚Ä¢ `/init_db` - –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ë–î\n"
        text += "‚Ä¢ `/reset_db` - —Å–±—Ä–æ—Å–∏—Ç—å –ë–î"
        
        await callback_query.message.edit_text(
            text=text,
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error in settings callback: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
