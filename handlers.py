from aiogram import Router, types
from aiogram.filters import BaseFilter, CommandStart, Command
from text import WELCOME_MESSAGE, HELP_MESSAGE
from kb import main_keyboard
from db import save_video_message, get_video_count, get_user_stats, get_total_users
import logging

class TextEqualsFilter(BaseFilter):
    def __init__(self, text: str, ignore_case: bool = True):
        self.text = text
        self.ignore_case = ignore_case

    async def __call__(self, message: types.Message) -> bool:
        if message.text is None:
            return False
        if self.ignore_case:
            return message.text.lower() == self.text.lower()
        return message.text == self.text

router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    try:
        logging.info(f"Start command received from user {message.from_user.id}")
        await message.answer(WELCOME_MESSAGE, reply_markup=main_keyboard())
        logging.info("Start command response sent")
    except Exception as e:
        logging.error(f"Error in start command: {e}")

@router.message(Command(commands=["help"]))
async def cmd_help(message: types.Message):
    try:
        await message.answer(HELP_MESSAGE)
    except Exception as e:
        print(f"Error in help command: {e}")

@router.message(Command(commands=["videos"]))
async def cmd_videos(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        video_count = get_video_count()
        if video_count > 0:
            await message.answer(f"üé• –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {video_count} –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                               f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º!")
        else:
            await message.answer("üé• –ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n\n"
                               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª!")
    except Exception as e:
        logging.error(f"Error in videos command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command(commands=["random"]))
async def cmd_random_video(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
    try:
        from db import get_random_video
        
        video_data = get_random_video()
        
        if video_data:
            file_id, file_unique_id, username, caption = video_data
            message_text = f"üé• –°–ª—É—á–∞–π–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\nüìπ –û—Ç: {username}"
            
            await message.answer_video(
                video=file_id,
                caption=message_text
            )
            logging.info(f"Random video sent manually by user {message.from_user.id}")
        else:
            await message.answer("üé• –ö–æ–ª–ª–µ–∫—Ü–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n\n"
                               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –±–æ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏–ª!")
    except Exception as e:
        logging.error(f"Error in random video command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–∏–¥–µ–æ")

@router.message(Command(commands=["stats"]))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        video_count = get_video_count()
        total_users = get_total_users()
        user_stats = get_user_stats()
        
        if video_count > 0:
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
            stats_text += f"üé• –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {video_count}\n"
            stats_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n\n"
            stats_text += f"üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            
            for i, (username, count) in enumerate(user_stats[:5], 1):
                stats_text += f"{i}. {username}: {count} –≤–∏–¥–µ–æ\n"
                
            await message.answer(stats_text)
        else:
            await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.\n\n"
                               f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
    except Exception as e:
        logging.error(f"Error in stats command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command(commands=["time"]))
async def cmd_time(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        from config import MEMORY_HOUR, MEMORY_MINUTE
        
        time_str = f"{MEMORY_HOUR:02d}:{MEMORY_MINUTE:02d}"
        await message.answer(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {time_str}\n\n"
                           f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
    except Exception as e:
        logging.error(f"Error in time command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

@router.message(Command(commands=["add_video"]))
async def cmd_add_video(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤—Ä—É—á–Ω—É—é –ø–æ file_id (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤)
        admin_ids = [203593418]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–æ–≤
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        command_text = message.text.split()
        if len(command_text) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_video <file_id>\n\n"
                               f"–ü—Ä–∏–º–µ—Ä: /add_video DQACAgIAAyEFAASVwQjMAAINKmi3iN_95n1LCbr-QabEUt3-qRvNAAKYdwACYNnASeJU1kTZBTitNgQ")
            return
        
        file_id = command_text[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
        success = save_video_message(
            file_id=file_id,
            file_unique_id=f"manual_{file_id[:10]}",  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            message_id=message.message_id,
            user_id=message.from_user.id,
            username=message.from_user.username or message.from_user.first_name,
            caption="–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é"
        )
        
        if success:
            video_count = get_video_count()
            await message.answer(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é!\n\n"
                               f"–í—Å–µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {video_count}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")
            
    except Exception as e:
        logging.error(f"Error in add_video command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ")

@router.message(Command(commands=["test_yearly"]))
async def cmd_test_yearly(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        logging.info(f"Test yearly command received from user {message.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–æ–≤
        
        logging.info(f"User ID: {message.from_user.id}, Admin IDs: {admin_ids}")
        
        if message.from_user.id not in admin_ids:
            logging.warning(f"User {message.from_user.id} is not admin")
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        logging.info("User is admin, proceeding with test")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        from utils import send_yearly_message
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.info("Sending yearly message...")
        await send_yearly_message()
        logging.info("Yearly message sent successfully")
            
    except Exception as e:
        logging.error(f"Error in test_yearly command: {e}")
        import traceback
        traceback.print_exc()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(Command(commands=["my_id"]))
async def cmd_my_id(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ—Ç username"
        first_name = message.from_user.first_name or "–ù–µ—Ç –∏–º–µ–Ω–∏"
        
        await message.answer(f"üÜî –í–∞—à ID: {user_id}\n"
                           f"üë§ Username: @{username}\n"
                           f"üìù –ò–º—è: {first_name}")
        
        logging.info(f"User ID check: {user_id}, username: {username}, name: {first_name}")
        
    except Exception as e:
        logging.error(f"Error in my_id command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID")

@router.message(Command(commands=["test_chat"]))
async def cmd_test_chat(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        from config import CHAT_ID
        from aiogram import Bot
        from config import TOKEN
        
        bot = Bot(token=TOKEN)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await bot.send_message(
                chat_id=CHAT_ID, 
                text="üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞!\n\n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ."
            )
            await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {CHAT_ID}")
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
            
        finally:
            await bot.session.close()
            
    except Exception as e:
        logging.error(f"Error in test_chat command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞")

@router.message(Command(commands=["get_chat_id"]))
async def cmd_get_chat_id(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    try:
        chat_id = message.chat.id
        chat_type = message.chat.type
        chat_title = message.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        
        await message.answer(f"üÜî ID —á–∞—Ç–∞: {chat_id}\n"
                           f"üìù –¢–∏–ø: {chat_type}\n"
                           f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}")
        
        logging.info(f"Chat ID: {chat_id}, Type: {chat_type}, Title: {chat_title}")
        
    except Exception as e:
        logging.error(f"Error in get_chat_id command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —á–∞—Ç–∞")

@router.message(Command(commands=["set_yearly_image"]))
async def cmd_set_yearly_image(message: types.Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not message.photo:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /set_yearly_image")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        photo = message.photo[-1]
        file_id = photo.file_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        from config import update_yearly_photo
        update_yearly_photo(file_id)
        
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                           f"File ID: {file_id}\n"
                           f"–¢–µ–ø–µ—Ä—å –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π.")
        
        logging.info(f"Yearly image updated by user {message.from_user.id}: {file_id}")
        
    except Exception as e:
        logging.error(f"Error in set_yearly_image command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏")

@router.message(Command(commands=["remove_yearly_image"]))
async def cmd_remove_yearly_image(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        from config import remove_yearly_photo
        remove_yearly_photo()
        
        await message.answer("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞!\n\n"
                           "–¢–µ–ø–µ—Ä—å –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
        
        logging.info(f"Yearly image removed by user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in remove_yearly_image command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏")

@router.message(Command(commands=["add_yearly_event"]))
async def cmd_add_yearly_event(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        command_text = message.text.split()
        if len(command_text) < 4:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_yearly_event <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–¥–µ–Ω—å> <–º–µ—Å—è—Ü> [—á–∞—Å] [–º–∏–Ω—É—Ç–∞]\n\n"
                               "–ü—Ä–∏–º–µ—Ä: /add_yearly_event –î–µ–Ω—å_—Ä–æ–∂–¥–µ–Ω–∏—è 15 3 12 0\n"
                               "–ü—Ä–∏–º–µ—Ä: /add_yearly_event –ù–æ–≤—ã–π_–≥–æ–¥ 1 1")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–æ–≤)
        name = command_text[1].replace('_', ' ')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        try:
            day = int(command_text[2])
            month = int(command_text[3])
            hour = int(command_text[4]) if len(command_text) > 4 else 10
            minute = int(command_text[5]) if len(command_text) > 5 else 0
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö: {e}\n\n"
                               "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–Ω—å, –º–µ—Å—è—Ü, —á–∞—Å –∏ –º–∏–Ω—É—Ç–∞ - —ç—Ç–æ —á–∏—Å–ª–∞")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        from db import add_yearly_event, get_yearly_events
        
        logging.info(f"Adding yearly event: name={name}, day={day}, month={month}, hour={hour}, minute={minute}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing_events = get_yearly_events()
        logging.info(f"Existing events count: {len(existing_events)}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
        try:
            logging.info("Calling add_yearly_event function...")
            logging.info(f"Parameters: name={name}, day={day}, month={month}, hour={hour}, minute={minute}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞
            from db import add_yearly_event
            logging.info(f"add_yearly_event function: {add_yearly_event}")
            
            success = add_yearly_event(name, day, month, hour, minute, f"{name}!")
            logging.info(f"Function call completed, result: {success}")
        except Exception as e:
            logging.error(f"Exception in add_yearly_event: {e}")
            import traceback
            traceback.print_exc()
            success = False
        
        logging.info(f"Add yearly event result: {success}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å
        events_after = get_yearly_events()
        logging.info(f"Events after adding: {len(events_after)}")
        
        if success:
            await message.answer(f"‚úÖ –ï–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                               f"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                               f"üìÜ –î–∞—Ç–∞: {day}.{month}\n"
                               f"‚è∞ –í—Ä–µ–º—è: {hour:02d}:{minute:02d}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            
    except Exception as e:
        logging.error(f"Error in add_yearly_event command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

@router.message(Command(commands=["list_yearly_events"]))
async def cmd_list_yearly_events(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –µ–∂–µ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    try:
        from db import get_yearly_events
        
        events = get_yearly_events()
        
        if not events:
            await message.answer("üìÖ –ï–∂–µ–≥–æ–¥–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        events_text = "üìÖ **–ï–∂–µ–≥–æ–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:**\n\n"
        
        for event in events:
            event_id, name, day, month, hour, minute, message_text, music_url, photo_file_id, is_active, created_at = event
            events_text += f"üÜî **{event_id}** - {name}\n"
            events_text += f"üìÜ {day:02d}.{month:02d} –≤ {hour:02d}:{minute:02d}\n"
            events_text += f"üí¨ {message_text[:50]}{'...' if len(message_text) > 50 else ''}\n\n"
        
        await message.answer(events_text)
        
    except Exception as e:
        logging.error(f"Error in list_yearly_events command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")

@router.message(Command(commands=["delete_yearly_event"]))
async def cmd_delete_yearly_event(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –µ–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è
        command_text = message.text.split()
        if len(command_text) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete_yearly_event <ID_—Å–æ–±—ã—Ç–∏—è>\n\n"
                               "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_yearly_events —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å ID")
            return
        
        event_id = int(command_text[1])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        from db import delete_yearly_event
        success = delete_yearly_event(event_id)
        
        if success:
            await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
            
    except Exception as e:
        logging.error(f"Error in delete_yearly_event command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")

@router.message(Command(commands=["init_db"]))
async def cmd_init_db(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from db import create_tables
        create_tables()
        
        await message.answer("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        
        logging.info(f"Database tables initialized by user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in init_db command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü")

@router.message(Command(commands=["debug_db"]))
async def cmd_debug_db(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        import os
        from config import DB_PATH
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        debug_info = f"üîç **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**\n\n"
        debug_info += f"üìÅ –ü—É—Ç—å –∫ –ë–î: `{DB_PATH}`\n"
        debug_info += f"üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: `{os.getcwd()}`\n"
        debug_info += f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
        
        try:
            files = os.listdir('.')
            for file in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
                debug_info += f"  - {file}\n"
            if len(files) > 10:
                debug_info += f"  ... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤\n"
        except Exception as e:
            debug_info += f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}\n"
        
        debug_info += f"\nüìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –ë–î:\n"
        if os.path.exists(DB_PATH):
            debug_info += f"  ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
            debug_info += f"  üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(DB_PATH)} –±–∞–π—Ç\n"
            debug_info += f"  üîê –ü—Ä–∞–≤–∞: {oct(os.stat(DB_PATH).st_mode)[-3:]}\n"
        else:
            debug_info += f"  ‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        debug_info += f"\nüîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
        try:
            import sqlite3
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            debug_info += f"  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n"
            debug_info += f"  üìã –¢–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}\n"
            conn.close()
        except Exception as e:
            debug_info += f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}\n"
        
        await message.answer(debug_info)
        
    except Exception as e:
        logging.error(f"Error in debug_db command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

@router.message(Command(commands=["reset_db"]))
async def cmd_reset_db(message: types.Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        admin_ids = [203593418]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        import os
        from config import DB_PATH
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if DB_PATH != ':memory:' and os.path.exists(DB_PATH):
            import shutil
            if os.path.isdir(DB_PATH):
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —É–¥–∞–ª—è–µ–º –µ—ë
                shutil.rmtree(DB_PATH)
                await message.answer(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞: {DB_PATH}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                os.remove(DB_PATH)
                await message.answer(f"‚úÖ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω: {DB_PATH}")
        else:
            await message.answer("‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        from db import create_tables
        create_tables()
        
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")
        
        logging.info(f"Database reset by user {message.from_user.id}")
        
    except Exception as e:
        logging.error(f"Error in reset_db command: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.message(TextEqualsFilter(text="–ü—Ä–∏–≤–µ—Ç"))
async def greet(message: types.Message):
    try:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    except Exception as e:
        print(f"Error in greet handler: {e}")

@router.message(lambda message: message.video is not None)
async def handle_video(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logging.info(f"Video message received from user {message.from_user.id}")
        video = message.video
        user = message.from_user
        
        logging.info(f"Video details: file_id={video.file_id}, file_unique_id={video.file_unique_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = save_video_message(
            file_id=video.file_id,
            file_unique_id=video.file_unique_id,
            message_id=message.message_id,
            user_id=user.id,
            username=user.username or user.first_name,
            caption=message.caption
        )
        
        if success:
            logging.info(f"Video saved successfully from user {user.id}: {video.file_id}")
        else:
            logging.error(f"Failed to save video from user {user.id}: {video.file_id}")
            
    except Exception as e:
        logging.error(f"Error handling video: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

@router.message(lambda message: message.video_note is not None)
async def handle_video_note(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è-–∫—Ä—É–∂–æ—á–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logging.info(f"Video note received from user {message.from_user.id}")
        video_note = message.video_note
        user = message.from_user
        
        logging.info(f"Video note details: file_id={video_note.file_id}, file_unique_id={video_note.file_unique_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = save_video_message(
            file_id=video_note.file_id,
            file_unique_id=video_note.file_unique_id,
            message_id=message.message_id,
            user_id=user.id,
            username=user.username or user.first_name,
            caption="–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ-–∫—Ä—É–∂–æ—á–µ–∫"
        )
        
        if success:
            logging.info(f"Video note saved successfully from user {user.id}: {video_note.file_id}")
        else:
            logging.error(f"Failed to save video note from user {user.id}: {video_note.file_id}")
            
    except Exception as e:
        logging.error(f"Error handling video note: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è")
